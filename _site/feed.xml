<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-16T17:32:24+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">朱成林的博客</title><subtitle>I&apos;m Zhu Chenglin. I live in Suzhou, China with my wife, two children.</subtitle><entry><title type="html">项目如何做好任务分配</title><link href="http://localhost:4000/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2017/04/26/how-to-allocate-task-effective.html" rel="alternate" type="text/html" title="项目如何做好任务分配" /><published>2017-04-26T10:20:00+08:00</published><updated>2017-04-26T10:20:00+08:00</updated><id>http://localhost:4000/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2017/04/26/how-to-allocate-task-effective</id><content type="html" xml:base="http://localhost:4000/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/2017/04/26/how-to-allocate-task-effective.html"><![CDATA[<p><strong>TL;DR</strong></p>

<ul>
  <li>常见项目管理工具介绍</li>
  <li>项目管理最重要的内容</li>
  <li>谁来撰写以及分配任务</li>
  <li>如何有效地分配任务</li>
</ul>

<h1 id="项目管理工具">项目管理工具</h1>

<p>在我工作的这些年里，用过不少的项目管理系统：<a href="https://www.atlassian.com/software/jira">Jira</a>, <a href="https://products.office.com/en-us/project/project-and-portfolio-management-software">Microsoft Project</a>, <a href="https://trello.com/">Tello</a>, <a href="http://www.redmine.org/">Redmine</a> …</p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-04-26/1-jira.png" alt="" /></p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-04-26/2-trello.png" alt="" /></p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-04-26/3-redmine.png" alt="" /></p>

<h1 id="项目管理最重要的内容是什么">项目管理最重要的内容是什么？</h1>

<p>用什么工具不是最重要的，重要的是要把工具真正用起来。功能再强大的工具你没有用起来，或者太复杂使用成本太高，那也是白搭！</p>

<p><strong>往往工具越复杂，使用的成本就越高，运用到项目中的机率也越低</strong>。</p>

<p>可以选择一个最简单的工具，而不要一上来就整一个号称“全宇宙第一”的“巨无霸”。</p>

<p>工具不能成为给领导汇报的形式。这样只会浪费时间，增加毫无意义的管理成本。</p>

<p>无论选择哪个工具，最基本的只需要包括这些：</p>

<ul>
  <li><strong>计划完成日期</strong> 该任务计划在哪一天完成。</li>
  <li><strong>预期工时</strong> 细分后的任务要给出一个合理的预期工时，必须以<strong>小时</strong>为单位。</li>
  <li><strong>实际完成日期</strong> 指定的任务实际完成时的日期。</li>
  <li><strong>实际工时</strong> 该任务完成时实际所耗的工时。</li>
  <li><strong>优先级</strong> 任务都应该有一个优先级，将影响别人的任务优先级设置为更高，避免团队其他成员”<strong>Waiting for you</strong>“。</li>
</ul>

<p>其中任务分配时的预期工时必须足够细，越细越好，一般控制在半天之内，最多不超过一天，不过这也增加了管理上的成本。这需要管理者作一个权衡。</p>

<p>当然如果你们的团队是自带鸡血的，总是能完美收工的话，你只需要粗略地将一周的任务安排给他们，那就爽歪歪了。</p>

<h1 id="谁来分配任务">谁来分配任务</h1>

<blockquote>
  <p>老板让你2个月开发出一个产品，研发吭哧吭哧地搞了2个月，到了第2个月的30号交给老板，老板很开心地打开系统，发现连TM登录都登录不了。</p>

  <p>老板心情好的话，可能你会被狠K一顿；心情不好的话，你就得去人事部，结下最后的工资了，出门左转…</p>
</blockquote>

<p>造成这个问题的原因有两种：</p>

<ol>
  <li>
    <p>老板催着你必须在2个月内完成。</p>

    <p>这个好办，你只要跟老板讲两个字：<strong>尽量</strong>。如果老板回你两个字：<strong>必须！</strong>。你有两套方案，先进入疯狂加班模式，到第2个月中，发现还有80%尚未完成，启动<strong>Plan B</strong>，好好更新下简历！</p>
  </li>
  <li>
    <p>任务分配者对任务的时间预估偏差太大。</p>
  </li>
</ol>

<p>要想项目的分配尽可能地准确，任务分配者必须了解项目研发相关的技术，倒不是要非常熟练，至少有所了解。另外最好工作经验在6年以上。</p>

<p>当然如果这个任务只是用来应付老板的，找过最闲的手下去做就可以了。</p>

<h1 id="每周一开会过一下本周的任务">每周一开会过一下本周的任务</h1>

<p>任务一般在细分后，在周一上午，团队在一起过一下每个人本周所要完成的任务功能点，这样有如下几个好处：</p>

<ul>
  <li>尽快摆脱”星期一综合症“。</li>
</ul>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-04-26/4-monday-syndrome.jpeg" alt="" /></p>

<ul>
  <li>
    <p>让大家了解彼此所做的事情，方便研发过程中的沟通。</p>
  </li>
  <li>
    <p>了解一下自己本周要完成的任务，看看有哪些可能会遇到的坑，方便自己合理安排时间。</p>
  </li>
  <li>
    <p>项目任务之间难免会有一些依赖关系。比如后台必须先写好接口，APP才能做获取服务器数据的工作，需要对任务进行优先级上的调整，避免“A等待B的现象”。</p>
  </li>
</ul>

<h1 id="不要低估内外部沟通成本">不要低估内外部沟通成本</h1>

<p>碰上项目需要对外跟客户进行沟通，那你就惨了。</p>

<p>加上习惯性被忽视的内部沟通成本，产品经理、项目经理、研发经理、研发团队内部…</p>

<p>对了，还有那可恶的销售人员，不知是不是喝完酒后跟用户说产品啥功能都有，1个月就可以交付使用。终于知道心中一万只羊驼奔腾而过是什么感受了。</p>

<p>还有从来都是被遗忘的产品测试和调试时间，其实这是项目研发过程中耗在这上面的时间是很长的，甚至于超过编码时间。</p>

<p>加上老板有事没事来看望你两眼，对你表示关心（<strong>其实是来催一下进度，看你有没有混日子。打断你的思路，你还要表示谢谢</strong>）。</p>

<h1 id="不要高估程序员的效率">不要高估程序员的效率</h1>

<p>在我工作的这些年里，说来忏愧，记不得哪个项目是真正意思上按时完成的！</p>

<p>如果你的工作计划做得很细，以小时为单位的总预期工时可能还算准，但如果你是按一天8小时算的，不好意思，这个项目一定会延期！而且会延期双倍时间。</p>

<p>你真认为员工真的像发动机一样，在8小时高速运转吗？基础上99.99%的公司不是（还有0.01%留给你们公司）。</p>

<p>正常的有效工作时间只有8的一半：<strong>3小时</strong>！</p>

<p>还有现在所想不到的”不可抗力因素“：员工恋爱了、失恋了、结婚了、吵架了、怀孕了、离职了…办公室突然断电了、断网了…</p>

<p>在老板看来，办法无非两种：（其实这两种办法都不明智）</p>

<ul>
  <li><strong>加班</strong> 加班是最不明智的方法，常态的加班只能让程序员效率变低，最终的效率还不如正常下班的带来的效率高。当然项目进度很紧的话，短时间内的加班还是有必要的。</li>
  <li><strong>加人</strong> “赶紧招一个补上”。天那！这也不是工厂，招一个新人的成本太高了，这兄弟啥时能上手啊，等上手的时候估计项目已经延期很久了。还要考虑一个老兵带新兵带来的”内耗”。</li>
</ul>]]></content><author><name></name></author><category term="项目管理" /><summary type="html"><![CDATA[TL;DR]]></summary></entry><entry><title type="html">没有需求设计文档？对不起，拒绝开发！</title><link href="http://localhost:4000/frist-blog/2017/03/15/no-document-no-develop.html" rel="alternate" type="text/html" title="没有需求设计文档？对不起，拒绝开发！" /><published>2017-03-15T10:20:00+08:00</published><updated>2017-03-15T10:20:00+08:00</updated><id>http://localhost:4000/frist-blog/2017/03/15/no-document-no-develop</id><content type="html" xml:base="http://localhost:4000/frist-blog/2017/03/15/no-document-no-develop.html"><![CDATA[<p>在很多软件公司，特别是一些创业型的团队中，对于这样的情景可能大家都很熟悉：项目经理或者产品经理（<strong>产品狗</strong>）口头或者简单记录一下软件产品的大致要做的功能，直接就让研发团队的兄弟（<strong>程序猿</strong>）去狂撸代码。然后他就去喝茶撩妹或者回家陪老婆了…</p>

<p>这种撸起袖子就开干的方式，看似简单高效，便于直接沟通，能够快速迭代。却不知，没有一份正式且实时更新的功能需求设计文档，会付出三四倍的代价来弥补。</p>

<p>最终会引发一场产品狗和程序猿之间的“<strong>猿狗大战</strong>”…</p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-03-15/1-apes-dog-fight.jpeg" alt="" /></p>

<h1 id="why---为什么需要功能需求设计说明书">WHY - 为什么需要功能需求设计说明书</h1>

<p>在没有功能设计文档时，主要有如下几个问题：</p>

<ul>
  <li><strong>前期研究团队沟通成本</strong></li>
</ul>

<p>如何要让团队里面的所有人员对软件产品的功能需求设计有一个共识？<strong>没有功能设计文档，反正我是想不出有什么办法</strong>。当该项目的团队人员越多，沟通成本就变得很高。</p>

<p>研发人员很容易有一个通病：以为自己了解了一小块需求就立即开始埋头狂撸代码。最终很可能与项目经理和客户真正想要的功能相差甚远。</p>

<p>更可怕的，研发人员把数据库设计好了，代码也已经写得差不多了，这时产品狗突然跑到程序猿这，说我们的需求要做一点变化，大家都知道，“<strong>对产品狗来说那一点变化，可能会害得程序猿撸个几天几夜</strong>”。那很小的变更可能导致之前设计的数据库，码的代码都不能用了。对于程序猿没有什么比加班加点写了几个月的代码最终被产品狗告知需求变了，代码要删除重新写更可怕的。估计<strong>只能用涨工资来安慰一下了</strong>。</p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-03-15/2-change-requirements-3-times.png" alt="" /></p>

<p>还有一个比较隐藏的事情是，每个程序猿都认为自己写的代码很牛逼（其实对于大多数人这只是一个错觉），不太愿意删除之前所写的东西，总是想在原有的代码基础上进行修改。<strong>让他们删除代码比杀了他还难</strong>。</p>

<p>作为软件公司的负责人，我每几天都会Code Review团队里面所有人的代码，一直要求他们把不用的代码去掉，但他们的应对方式总是加两个<code class="language-plaintext highlighter-rouge">//</code>。注释掉他们写的代码，而不是去做真正的删除动作。他们总有自己的理由，<strong>“这只是暂时注释掉，后面会用到”</strong>，但最终的结果是那些代码就像尸体一样一直在那里，干扰着团队人员正常的思路。所以我只能强制性让他们那些“暂时没有用，以后会用到的代码”干掉 。</p>

<ul>
  <li><strong>前期任务进度安排和分配</strong></li>
</ul>

<p>该文档也是任务进度安排和分配的重要依据。<strong>在没有功能需求设计文档之前的所有任务进度计划都是瞎扯淡</strong>，都不知道具体要做什么东西，哪能拿出合理的任务进度计划。如果你拿出来了，我也不相信那是经过认真分析做的进度计划，那只是用来看领导看的。</p>

<ul>
  <li><strong>中期产品经理需求变更</strong></li>
</ul>

<p>软件在开发过程中难免会遇到功能的需求变更，将程序猿们召集在一起把所有的变更讲一遍？当走出会议室的时候可能每个人都有自己的理解。<strong>下一场战争已悄然临近…</strong></p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-03-15/3-multiple-apes.jpeg" alt="" /></p>

<ul>
  <li><strong>后期测试团队产品测试</strong></li>
</ul>

<p>测试团队应该在项目Kickoff之时就应该介入，而不是在产品开发完成之后。测试团队应该对功能需求设计文档充分了解，且以此来编写具体的测试用例文档。否则，只能是在界面上进行简单的表面测试，而真正的BUG并不在表面，这些BUG会藏得很深，等发现的时候可能已经造成很大的损失。测试团队想覆盖全部的测试用例此时已经相当困难，他们甚至都不知道产品有哪些功能。</p>

<p>测试用例应该尽可能详细，尽量保证测试用例走完能确保产品能上线发布。以登录注册作个简单示例：</p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-03-15/4-testcase.png" alt="" /></p>

<h1 id="where---文档应该放在何处">WHERE - 文档应该放在何处</h1>

<p>功能说明文档一定要保持实时性，任何变更的需求，新增的需求都必须在该文档中体现。</p>

<p>一只产品狗（或一群）在编写完文档后，要发给项目经理、研发人员、销售人员、运营推广人员等人，如何保证每个人的文档都是最新的呢？如果通过微信，邮件等方式，是不是每次更新都要重新通知所有人：“嘿，各位兄弟，文档作了一次修改，我给大家都重新发一份新的”。每个人电脑里面都有好几个版本的文档，时间长了自己都忘记哪个文档是最新的。产品狗也记不清是否是所有相关的人都发了最新的文档。</p>

<p>研发人员可能会说通过SVN等工具来进行版本管理，给每个人分配一个帐号。“天啊，SVN是啥？” - 产品狗、销售人员、运营推广人员估计一脸懵逼。</p>

<p>更好的办法是通过团队实时协作的云端工具。从而实现分享和实时讨论，告别反复修改版本再发送邮件的麻烦。比如使用<a href="https://www.google.com/docs/about/">Google Docs</a>、<a href="https://www.microsoft.com/en-us/microsoft-365/onedrive/online-cloud-storage">Microsoft OneDrive</a>等。</p>

<h1 id="what---什么是功能需求设计文档--应该包含那些内容">WHAT - 什么是功能需求设计文档 &amp; 应该包含那些内容</h1>

<p>功能需求设计文档最重要的是描述产品所要包含的所有功能，越详细越好，可以结合产品的<strong>原型设计图</strong>来讲解。让项目所有相关人知道产品是什么，包含哪些页面，页面如何跳转等。</p>

<p>该文档是产品经理、项目经理、研发人员、销售人员、运营推广人员沟通的一个桥梁，一份好的功能需求设计文档是软件产品是否能成功的关键。</p>

<p>考虑是该文档的受众，这份文档不应该包含具体的编程技术上的说明。不管你是用C#/.NET、JAVA还是其它，这应该是另外研发团队内部使用的一份文档。</p>

<p>一般人第一反映就是去网上找一份功能需求设计文档模板，那些模板90%没有存在的必要，都太过形式化，没有实际意义和模板化的内容，只会使文档成为一个摆饰，反而是在浪费大家的时间。</p>

<p>那么一份合格的软件需求设计文档应该包括哪些内容呢？</p>

<ul>
  <li><strong>项目背景</strong></li>
</ul>

<p>项目产生的实际背景、具体的运用场景、大致要解决什么样的问题、针对的阅读对象、版本修改记录、文档作者以及修改人信息。</p>

<ul>
  <li><strong>详细的功能点描述</strong></li>
</ul>

<p>写明产品所包含的所有功能点，对功能、界面、接口的描述一定要充分详细，每处可以交互的地方都要给出具体的说明。再次强调，一定要<strong>详细描述每一个页面所拥有的功能</strong>。</p>

<ul>
  <li><strong>产品不包含的功能点说明</strong></li>
</ul>

<p>除了写明产品所包含的所有功能点外，还应该写明软件所不包含的功能，这一点也很重要。</p>

<ul>
  <li><strong>使用场景（画面感）</strong></li>
</ul>

<p>将复杂的业务逻辑融入到具体的<strong>使用场景</strong>中，更容易让项目经理、研发人员、销售人员、运营推广人员不同背景的人产生共识。</p>

<ul>
  <li><strong>流程图</strong></li>
</ul>

<p>大家都知道“一图胜千言”，能用图说明的尽量用图来说明，只通过大量枯燥的文字可能效果并不太好。流程图是一种用图形表示逻辑和算法的工具，特别对研发人员撸代码很有帮助。</p>

<p>Windows用户可以使用Visio，Mac用户可以使用<a href="https://www.omnigroup.com/omnigraffle/">OmniGraffle</a>。还可以使用在线实时协作工具<a href="https://www.processon.com/">ProcessOn</a>。</p>

<p>我之前就用ProcessOn画了一个“设置了缓存的网络请求”的流程图，这里作个参考：</p>

<p><img src="https://zhuchenglin-blog.oss-cn-shanghai.aliyuncs.com/2017-03-15/5-sample-flowchart-template.png" alt="" /></p>

<ul>
  <li><strong>人员角色“实例化”</strong></li>
</ul>

<p>跟上面提到的“画面感”相结合，将人员和角色能够实例化。比如要实现如下需求，有两种表达方式：</p>

<blockquote>
  <p>医生给患者测量血压，并记录到系统中。</p>
</blockquote>

<blockquote>
  <p>上海医院肾内科的朱医生给32号病区1号病床的病人刘阿姨测量血压，将测量到的血压<code class="language-plaintext highlighter-rouge">100/70mmHg</code>输入到透析管理系统。</p>
</blockquote>

<p>哪种方式更便于理解？当然可能有人觉得第一种方式更简洁，那可能是我举的例子不够好。</p>

<ul>
  <li><strong>结合产品原型设计图</strong></li>
</ul>

<p>产品原型设计图可以粗枝大叶地产品大致的框架。便于项目经理、研发人员、销售人员、运营推广人员等人在产品未开发之前对产品有一个相对直观的认识。没有一个原型图，想到这帮人拉到同一个频道沟通一定是不可能的事。（如果你做到了，那么赶紧把你的简历发我，我们需要你！）</p>

<p>常用的原型设计工具有<a href="https://www.axure.com/">Axure</a>、<a href="https://modao.cc/">墨刀</a>、<a href="https://www.mockplus.cn/">Mockplus</a>。</p>

<h1 id="how---如何保证文档质量">HOW - 如何保证文档质量</h1>

<p>要保证文档能够实时更新同步，而不是疲于应付。那就是让大家都通过该文档来进行沟通，谁有问题直接去看文档，需求一旦变更首先就更新到文档。</p>

<p>研发人员严格按文档上的描述来开发，<strong>在没有文档之前，对不起，拒绝开发！</strong>任何口头、微信或邮件上的新的功能需求一概不理！提前是产品狗要比较给力，否则老板还是会让你狂撸代码…</p>]]></content><author><name></name></author><category term="frist-blog" /><summary type="html"><![CDATA[在很多软件公司，特别是一些创业型的团队中，对于这样的情景可能大家都很熟悉：项目经理或者产品经理（产品狗）口头或者简单记录一下软件产品的大致要做的功能，直接就让研发团队的兄弟（程序猿）去狂撸代码。然后他就去喝茶撩妹或者回家陪老婆了…]]></summary></entry></feed>